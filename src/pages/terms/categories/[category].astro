---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import { hashTitle } from "../../../utils/hashTitle";
import { sortTerms } from "../../../utils/sortTerms";

export async function getStaticPaths() {
  const postFiles = import.meta.glob('../../../blog/*.{md,mdx}', { eager: true });
  const categorySet = new Set<string>();
  for (const path in postFiles) {
    const { frontmatter } = postFiles[path] as any;
    frontmatter.categories?.forEach((c: string) => categorySet.add(c));
  }
  return Array.from(categorySet).map(category => ({
    params: { category },
  }));
}

const { category } = Astro.params;
const decodedCategory = decodeURIComponent(category);

const postFiles = import.meta.glob('../../../blog/*.{md,mdx}', { eager: true });

const posts = Object.entries(postFiles).map(([path, mod]) => {
  const typedMod = mod as {
    frontmatter: {
      title: string;
      date: string;
      slug?: string;
      categories?: string[];
      tags?: string[];
    };
    Content: any;
  };
  const date = typedMod.frontmatter.date.replace(/-/g, '').slice(0, 8);
  const hash = hashTitle(typedMod.frontmatter.title);
  const slug = typedMod.frontmatter.slug || `${date}-${hash}`;
  return {
    ...typedMod,
    url: `/blog/${slug}`,
    slug,
  };
});

const filtered = posts.filter(post => post.frontmatter.categories?.includes(decodedCategory));
filtered.sort((a, b) => b.frontmatter.date.localeCompare(a.frontmatter.date));

const pageTitle = `Category: ${decodedCategory}`;
---

<BaseLayout pageTitle={pageTitle}>
  <div class="max-w-3xl mx-auto px-8 py-16 w-full">
    <h1 data-scramble class="text-3xl font-bold mb-6">{pageTitle}</h1>
    <section>
      {filtered.length > 0 ? (
        <ul class="space-y-4">
          {filtered.map(post => (
            <li>
              <a href={post.url} class="block text-[var(--color-text)] bg-[var(--color-bg)] border border-[var(--color-border)] rounded-xl p-6 transition-all duration-200 ease-in-out transform hover:translate-x-[-4px] hover:translate-y-[-4px] hover:shadow-[4px_4px_0_var(--color-accent)] hover:border-[var(--color-accent)]">
                <div class="flex flex-wrap items-center gap-2 mb-4">
                  <span class="text-sm text-[var(--color-subtext)]">{post.frontmatter.date.slice(0, 10)}</span>
                  {post.frontmatter.categories && sortTerms(post.frontmatter.categories).map(c => (
                    <span class="bg-[var(--color-accent)] text-stone-50 px-2 py-0.5 rounded text-xs">{c}</span>
                  ))}
                  {post.frontmatter.tags && sortTerms(post.frontmatter.tags).map(tag => (
                    <span class="border border-[var(--color-accent)] text-[var(--color-accent)] px-2 py-0.5 rounded text-xs">#{tag}</span>
                  ))}
                </div>
                <h2 class="font-semibold text-xl">{post.frontmatter.title}</h2>
              </a>
            </li>
          ))}
        </ul>
      ) : (
        <p>No posts found.</p>
      )}
    </section>
  </div>
</BaseLayout>
